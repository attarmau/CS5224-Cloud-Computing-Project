import pandas as pd
import numpy as np
import json
import re
from datetime import datetime

admission = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/admission.csv')
diagnosa = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/diagnosa.csv')
anamnesa = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_anamnesa.csv')
fisik = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_fisik.csv')
fisik_gigi = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_fisik_gigi.csv')
fisik_mata = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_fisik_mata.csv')
tanda_vital = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_tanda_vital.csv')
allergy = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/m_person_allergy.csv')

specialization_mapping = {
    'DR PRAPTI EKA WAHYUNING': 'NaN',
    'DR TORIQ ARI PRAMBODO': 'NaN',
    'DR RUDY GUNAWAN': 'NaN',
    'DR ZAINUL FIKRI': 'NaN',
    'DR RUDIYANTO SP.PD': 'NaN',
    'DR YOEFAN FAISHAL ISLAM': 'NaN',
    'DR MAHARANI TONTOWI': 'NaN',
    'DR ABDUL HARIS SP.A': 'NaN',
    'DR DIAN SARASWATI': 'Spesialis Anak',
    'DR ALPHANI KURNIASARI SP.PD': 'NaN',
    'DR SAMSURI SP.P': 'NaN',
    'DR MOH NURKHOLIS ROUFI SP.BS': 'NaN',
    'DR SURYO PRASETYO TRIBOWO': 'NaN',
    'DR ABDUL MUDJIB': 'Spesialis Anak',
    'DR WINDA AMELIA LESTARI': 'NaN',
    'TIM SAKINAH': 'NaN',
    'DR RUDYANTO': 'Spesialis Penyakit Dalam',
    'DR DHANI TRI WAHYU SP.JP': 'NaN',
    'DR DHANI TRI WAHYU': 'Spesialis Jantung dan Pembuluh Darah',
    'DR RATNA DEWI SILALAHI': 'Spesialis Jantung dan Pembuluh Darah',
    'RUDIYANTO': 'NaN',
    'DR MOHAMAD ARY FIRMANTO': 'Spesialis Penyakit Dalam',
    'DR RATNA ADELIA PRAVITASARI': 'Spesialis Penyakit Dalam',
    'DR WIDHY PRAMONO': 'Spesialis Bedah',
    'DR ZICO PARADIGMA': 'Spesialis Bedah',
    'DR ZAINUL MUHTAROM': 'Spesialis Bedah',
    'DR IDA KUSUMANINGRUM': 'Spesialis Obstetri & Ginekologi (Kebidanan dan Kandungan)',
    'DR YULIANTO BASUKI': 'Spesialis Obstetri & Ginekologi (Kebidanan dan Kandungan)',
    'DR FAIZAL RACHMAN': 'NaN',
    'DR SOEPRIJANTOTRISNO PRIBADI': 'Spesialis Bedah Orthopaedi dan Traumatologi',
    'DR BUDI SAMSUL FUAD': 'Spesialis Mata'
}

def clean_name(name):
    if isinstance(name, str):
        name = name.upper()
        name = re.sub(r'SP\.\w+', '', name)
        return name.strip()
    return ''

admission['encounter_with_name_cleaned'] = admission['encounter_with_name'].apply(clean_name)
specialization_mapping_cleaned = {clean_name(key): value for key, value in specialization_mapping.items()}
admission['doctor_sp'] = admission['encounter_with_name_cleaned'].map(specialization_mapping_cleaned)
admission['doctor_sp'] = admission['doctor_sp'].replace('NaN', '')
admission['sex'] = admission['sex'].replace({'L': 'female', 'P': 'male'})
cleaned_admission = admission[~admission['sex'].isin(['', 'U'])]
cleaned_admission['diagnosa_rm'] = cleaned_admission['diagnosa_rm'].astype(str).str.upper()

cleaned_admission['tgl_lahir'] = pd.to_datetime(cleaned_admission['tgl_lahir'], errors='coerce')
cleaned_admission = cleaned_admission.dropna(subset=['tgl_lahir'])
current_date = datetime.now()
cleaned_admission['age'] = cleaned_admission['tgl_lahir'].apply(
    lambda dob: current_date.year - dob.year - ((current_date.month, current_date.day) < (dob.month, dob.day))
)
cleaned_admission = cleaned_admission[cleaned_admission['age'] > 0]

cleaned_admission = cleaned_admission.fillna('')
columns_to_keep = [
    'admission_id', 'person_id', 'sex', 'age', 'diagnosa_awal', 'diagnosa_awal_desc',
    'diagnosa_rm', 'diagnosa_primer', 'diagnosa_primer_desc', 'poli_id',
    'encounter_with_id', 'encounter_with_name', 'encounter_change_id',
    'encounter_change_name', 'jns_pelayanan_id', 'jns_pelayanan_name', 'poli_name', 'doctor_sp'
]

cleaned_admission = cleaned_admission[columns_to_keep]
cleaned_admission

# Check if 'diagnosa_rm' is empty (all values are NaN)
is_diagnosa_rm_empty = cleaned_admission['diagnosa_rm'].isna().all()

if is_diagnosa_rm_empty:
    print("'diagnosa_rm' is an empty column.")
else:
    print("'diagnosa_rm' has values.")

# diagnosa
diagnosa = diagnosa.dropna(subset=['person_id', 'rm_id','diagnosa'])[diagnosa['is_active'] == 1]
columns_to_keep_diagnosa = [
    'admission_id', 'person_id', 'episode_id', 'diagnosa', 'diagnosa_desc', 'diagnosa_type'
]

existing_columns_diagnosa = [col for col in columns_to_keep_diagnosa if col in diagnosa.columns]
filtered_diagnosa = diagnosa[existing_columns_diagnosa]
cleaned_diagnosa = filtered_diagnosa.dropna(subset=['admission_id', 'person_id', 'diagnosa', 'diagnosa_desc', 'diagnosa_type'])
cleaned_diagnosa = cleaned_diagnosa.fillna('')
cleaned_diagnosa = cleaned_diagnosa[~cleaned_diagnosa['diagnosa_type'].isin(['rehab medik', 'pasca bedah'])]

cleaned_diagnosa

cleaned_diagnosa['admission_id'] = cleaned_diagnosa['admission_id'].astype(str)
cleaned_admission['admission_id'] = cleaned_admission['admission_id'].astype(str)

combined_df = cleaned_diagnosa.merge(cleaned_admission, on=['admission_id', 'person_id'], how='inner')

# anamnesa

anamnesa = anamnesa.dropna(subset=['person_id', 'rm_id','keluhan_utama'])[anamnesa['is_active'] == 1]

columns_to_keep_anamnesa = [
    'admission_id', 'person_id', 'poli_id', 'keluhan_utama', 'keluhan_lainnya',
    'rwyt_penyakit_skrg', 'status_rwyt_penyakit_keluarga',
    'rwyt_penyakit_keluarga', 'rwyt_penyakit_dulu', 'rwyt_pengobatan', 'poli_name'
]

existing_columns_anamnesa = [col for col in columns_to_keep_anamnesa if col in anamnesa.columns]
filtered_anamnesa = anamnesa[existing_columns_anamnesa]
filtered_anamnesa = filtered_anamnesa.dropna(subset=['admission_id', 'person_id'])
cleaned_anamnesa = filtered_anamnesa.rename(columns={
    'diagnosa': 'diagnosa_anamnesa',
    'keluhan_utama': 'main_complaint',
    'keluhan_lainnya': 'other_complaint',
    'rwyt_penyakit_skrg': 'current_disease_history',
    'rwyt_penyakit_dulu': 'previous_disease_history',
    'status_rwyt_penyakit_keluarga': 'family_history',
    'rwyt_pengobatan': 'medical_history'
})

family_history_dict = {
    "1": "Hipertensi",
    "2": "Penyakit Jantung",
    "3": "Stroke",
    "4": "TB Paru",
    "5": "Diabetes Melitus",
    "6": "Asma",
    "7": "Lain-lain",
    "8": "Tidak Ada"
}

def process_family_history(text):
    if not isinstance(text, str) or not text:
        return ""
    lis = text.split(",")
    temp = ['Tidak Ada' for _ in lis]
    for i in range(len(lis)):
        if lis[i] in family_history_dict:
            temp[i] = family_history_dict[lis[i]]
    return ', '.join(temp)

cleaned_anamnesa['family_history'] = cleaned_anamnesa['family_history'].apply(process_family_history)

def transform_and_uppercase(text):
    if not isinstance(text, str):
        return text
    text = text.upper()
    if 'HT' in text:
        text = text.replace('HT', 'HIPERTENSI')
    if 'DM' in text or 'DIABETES' in text:
        text = text.replace('DM', 'DIABETES MELITUS').replace('DIABETES', 'DIABETES MELITUS')
    if 'TEST' in text:
        text = text.replace('TEST', '')
    return text.strip()

columns_to_transform = [
    'main_complaint', 'other_complaint', 'current_disease_history', 
    'family_history', 'previous_disease_history', 'medical_history'
]

for col in columns_to_transform:
    if col in cleaned_anamnesa.columns:
        cleaned_anamnesa[col] = cleaned_anamnesa[col].apply(transform_and_uppercase)

cleaned_anamnesa = cleaned_anamnesa.drop_duplicates(subset=['admission_id', 'person_id'], keep='first')

# mapping 
clinics_to_specialty_mapping = {

    "3175326": {
        "9103": ["Obstetrics and Gynecology"],
        "9104": ["Pediatrics"],
        "9105": ["Internal Medicine", "Surgery", "Pathology"],
        "9106": ["Dermatology", "Urology"],
        "9107": ["Ophthalmology"],
        "9109": ["Otolaryngology", "Internal Medicine"],
        "9110": ["Internal Medicine"],
        "9111": ["Pathology", "Pulmonology"],
        "9112": ["Cardiology"],
        "9113": ["Neurology", "Internal Medicine"],
        "9114": ["Psychiatry"],
        "9123": ["Rehabilitation/Physical Therapy"],
        "9126": ["Urology"],
        "9130": ["Urology"],
        "9131": ["Orthopedics"],
        "9151": ["Neurology"],
        "9152": ["Obstetrics and Gynecology"],
        "9153": ["Pediatrics"],
        "9154": ["Internal Medicine"],
        "9155": ["Cardiology"],
        "9156": ["Pathology"],
        "9157": ["Rehabilitation/Physical Therapy"],
        "9158": ["Dermatology"],
        "9161": ["Surgery"],
        "9162": [],
        "9166": ["Psychiatry"],
        "9167": [],
        "9168": ["Ophthalmology"],
        "9169": ["Otolaryngology"],
        "9170": ["Dentistry"],
        "9171": ["Urology"],
        "9172": ["Orthopedics"],
        "IGD": [],
        "ICU": []
    },
    "3210014": {
        "IGD": [],
        "HDL": ["Internal Medicine", "Nephrology"],
        "BED": ["Surgery", "Internal Medicine"],
        "JIW": ["Psychiatry"],
        "MAT": ["Ophthalmology"],
        "SAR": ["Neurology"],
        "ANA": ["Pediatrics"],
        "OBG": ["Obstetrics and Gynecology", "Internal Medicine"],
        "BDM": ["Internal Medicine"],
        "ICU": [],
        "AKA": ["Internal Medicine"],
        "INT": ["Orthopedics", "Internal Medicine"],
        "TBD": ["Internal Medicine"],
        "THT": ["Otolaryngology"],
        "TLD": ["Internal Medicine"],
        "ORT": ["Orthopedics"],
        "TLA": ["Pediatrics"],
        "KLT": ["Surgery", "Ophthalmology", "Pediatrics"],
        "NICU": ["Pediatrics"],
        "GIG": ["Dentistry"]
    },
    "3308022": {
        "IGD": [],
        "JAN": ["Rheumatology", "Cardiology"],
        "URO": ["Urology"],
        "ANA": ["Pediatrics"],
        "PED": ["Internal Medicine"],
        "PAR": ["Pathology", "Pulmonology"],
        "JIW": ["Psychiatry"],
        "OBG": ["Obstetrics and Gynecology"],
        "ORT": ["Orthopedics"],
        "UMU": [],
        "BED": ["Surgery", "Anesthesiology"],
        "DEV": ["Dermatology"],
        "KGI": ["Dentistry"],
        "nan": [],
        "THT": ["Otolaryngology"],
        "ICU": [],
        "SYA": ["Neurology"],
        "TBD": ["Pathology"],
        "FLA": ["Rheumatology", "Internal Medicine"],
        "NICU": ["Pediatrics"],
        "GIG": ["Dentistry"],
        "RHB": ["Rehabilitation/Physical Therapy"]
    },
    "3516062": {
        "JAN": ["Rheumatology"],
        "IGD": [],
        "BED": ["Surgery"],
        "ANA": ["Pediatrics"],
        "OBG": ["Obstetrics and Gynecology"],
        "MAT": ["Ophthalmology"],
        "THT": ["Otolaryngology"],
        "INT": ["Internal Medicine"],
        "nan": [],
        "BSY": ["Surgery"],
        "PAR": ["Pathology", "Pulmonology"],
        "SAR": ["Neurology"],
        "ORT": ["Orthopedics"],
        "URO": ["Urology"],
        "GP1": ["Dentistry"],
        "KLT": ["Dermatology"],
        "JIW": ["Psychiatry"],
        "IRM": ["Rehabilitation/Physical Therapy"],
        "ICU": [],
        "UMU": [],
        "HDL": ["Internal Medicine", "Nephrology"],
        "GND": ["Dentistry"],
        "GIZ": [],
        "ODC": ["Ophthalmology"]
    }
}

flat_mapping = {key: ', '.join(values) for region in clinics_to_specialty_mapping.values() for key, values in region.items()}
cleaned_anamnesa['clinics_specialty'] = cleaned_anamnesa['poli_id'].map(flat_mapping)

specialty_to_ICD10_mapping = {
    
    "Pediatrics": {
        "Unspecified": "Specialises in the care of infants, children, and adolescents, focusing on their physical, emotional, and developmental health, and managing various medical conditions.",
        "A37": "Whooping cough",
        "A38": "Scarlet fever",
        "P00-P04": "Fetus and newborn affected by maternal factors and by complications of pregnancy, labour and delivery",
        "P05-P08": "Disorders related to length of gestation and fetal growth",
        "P10-P15": "Birth trauma",
        "P20-P29": "Respiratory and cardiovascular disorders specific to the perinatal period",
        "P35-P39": "Infections specific to the perinatal period",
        "P50-P61": "Haemorrhagic and haematological disorders of fetus and newborn",
        "P70-P74": "Transitory endocrine and metabolic disorders specific to fetus and newborn",
        "P75-P78": "Digestive system disorders of fetus and newborn",
        "P80-P83": "Conditions involving the integument and temperature regulation of fetus and newborn",
        "P90-P96": "Other disorders originating in the perinatal period"
    },
    "Obstetrics and Gynecology": {
        "Unspecified": "Specialises in the care of infants, children, and adolescents, focusing on their physical, emotional, and developmental health, and managing various medical conditions.",
        "N60-N64": "Disorders of the breast",
        "N70-N77": "Inflammatory diseases of female pelvic organs",
        "N80-N98": "Noninflammatory disorders of female genital tract",
        "O00-O08": "Pregnancy with abortive outcome",
        "O10-O16": "Oedema, proteinuria and hypertensive disorders in pregnancy, childbirth and the puerperium",
        "O20-O29": "Other maternal disorders predominantly related to pregnancy",
        "O30-O48": "Maternal care related to the fetus and amniotic cavity and possible delivery problems",
        "O60-O75": "Complications of labour and delivery",
        "O80-O84": "Delivery",
        "O85-O92": "Complications predominantly related to the puerperium",
        "O94-O99": "Other obstetric conditions, not elsewhere classified",
        "Z30-Z39": "Persons encountering health services in circumstances related to reproduction"
    },
    "Internal Medicine": {
        "Unspecified": "Focuses on the prevention, diagnosis, and treatment of adult diseases, managing a broad range of complex medical conditions involving various organ systems."
    },
    "Surgery": {
        "Unspecified": "Often deals with a broad range of conditions common in surgical specialist"
    },
    "Pathology": {
        "Unspecified": "Focuses on the prevention, diagnosis, and treatment of adult diseases, managing a broad range of complex medical conditions involving various organ systems.",
        "A01": "Typhoid and paratyphoid fevers",
        "B00-B09": "Viral infections characterized by skin and mucous membrane lesions",  
        "B15-B19": "Viral hepatitis",
        "B20-B24": "Human immunodeficiency virus [HIV] disease",
        "B25-B34": "Other viral diseases",
        "B35-B49": "Mycoses",
        "B50-B64": "Protozoal diseases",
        "B65-B83": "Helminthiases", 
        "C00-D49": "Neoplasms",
        "C81-C96": "Malignant neoplasms, stated or presumed to be primary, of lymphoid, haematopoietic and related tissue",
        "C97-C97": "Malignant neoplasms of independent (primary) multiple sites",
        "D50-D89": "Diseases of the blood and blood-forming organs and certain disorders involving the immune mechanism",
        "G00-G03": "Infections of the nervous system",
        "G10-G14": "Hereditary and degenerative diseases of the central nervous system",
        "G20-G26": "Extrapyramidal and movement disorders",
        "I00-I09": "Rheumatic fever",
        "I10-I15": "Hypertension",
        "I20-I25": "Ischemic heart diseases",
        "I26-I28": "Pulmonary heart disease and diseases of pulmonary circulation",
        "M00-M25": "Arthropathies",
        "M30-M36": "Systemic connective tissue disorders",
        "N00-N08": "Glomerular diseases",
        "N10-N16": "Renal failure",
        "N17-N19": "Acute and chronic renal failure",
        "R70-R79": "Abnormal findings on examination of blood, without diagnosis",
        "R80-R82": "Abnormal findings on examination of urine, without diagnosis",  
        "R83-R89": "Abnormal findings on examination of other body fluids, substances and tissues, without diagnosis",  
        "R90-R94": "Abnormal findings on diagnostic imaging and in function studies, without diagnosis",
        "Z00-Z13": "Persons encountering health services for examination and investigation",
        "Z40-Z54": "Persons encountering health services for specific procedures and health care",
	    "C00-C75": "Malignant neoplasms, stated or presumed to be primary, of specified sites, except of lymphoid, haematopoietic and related tissue",
        "C81-C96": "Malignant neoplasms, stated or presumed to be primary, of lymphoid, haematopoietic and related tissue",
        "C97-C97": "Malignant neoplasms of independent (primary) multiple sites",
        "D00-D09": "In situ neoplasms (precancerous lesions and early-stage cancers)",
        "D10-D36": "Benign neoplasms",
        "D37-D48": "Neoplasms of uncertain or unknown behaviour",
        "M00-M99": "Diseases of the musculoskeletal system and connective tissue (which can involve pathology of bones and joints)",
        "N00-N99": "Diseases of the genitourinary system (pathological examination of reproductive organs and urinary tract)",
        "K00-K95": "Diseases of the digestive system (pathological examination of gastrointestinal tract organs)",
        "H00-H59": "Diseases of the eye and adnexa (including pathological conditions of the eye)",
        "Q80-Q89": "Other congenital malformations",  
        "Q90-Q99": "Chromosomal abnormalities, not elsewhere classified"
    },
    "Dermatology": {
        "A00": "Cholera",
        "A18.4": "Tuberculosis of skin and subcutaneous tissue",
        "A20.1": "Cellulocutaneous plague",
        "A21.0": "Ulceroglandular tularemia",
        "A22.0": "Cutaneous anthrax",
        "A26": "Erysipeloid",
        "A30": "Leprosy (Hansen's disease)",
        "A46": "Erysipelas",
        "A50-A64": "Infections with a predominantly sexual mode of transmission",
        "A65-A69": "Other spirochaetal diseases",
        "A74.8": "Other Chlamydial Diseases",
        "A74.9": "Chlamydial Infection, Unspecified",
        "A90-A99": "Arthropod-borne viral fevers and viral haemorrhagic fevers",
        "B00-B09": "Viral infections characterized by skin and mucous membrane lesions",
        "B25-B34": "Other viral diseases",
        "B35-B49": "Mycoses",
        "B85-B89": "Pediculosis, acariasis and other infestations",
        "B90-B94": "Sequelae of infectious and parasitic diseases",
        "L00-L08": "Infections of the skin and subcutaneous tissue",  
        "L10-L14": "Bullous disorders",  
        "L20-L30": "Dermatitis and eczema",  
        "L40-L45": "Papulosquamous disorders",  
        "L50-L54": "Urticaria and erythema",  
        "L55-L59": "Radiation-related disorders of the skin and subcutaneous tissue",  
        "L60-L75": "Disorders of skin appendages",  
        "L80-L99": "Other disorders of the skin and subcutaneous tissue",
        "R20-R23": "Symptoms and signs involving the skin and subcutaneous tissue",
        "Z20-Z29": "Persons with potential health hazards related to communicable diseases",
        "U80-U89": "Bacterial agents resistant to antibiotics"
    },
    "Urology": {
        "A00": "Cholera",
        "A18.4": "Tuberculosis of skin and subcutaneous tissue",
        "A20.1": "Cellulocutaneous plague",
        "A21.0": "Ulceroglandular tularemia",
        "A22.0": "Cutaneous anthrax",
        "A26": "Erysipeloid",
        "A30": "Leprosy (Hansen's disease)",
        "A46": "Erysipelas",
        "A50-A64": "Infections with a predominantly sexual mode of transmission",
        "A65-A69": "Other spirochaetal diseases",
        "A74.8": "Other Chlamydial Diseases",
        "A74.9": "Chlamydial Infection, Unspecified",
        "A90-A99": "Arthropod-borne viral fevers and viral haemorrhagic fevers",
        "B00-B09": "Viral infections characterized by skin and mucous membrane lesions",
        "B25-B34": "Other viral diseases",
        "B35-B49": "Mycoses",
        "B85-B89": "Pediculosis, acariasis and other infestations",
        "B90-B94": "Sequelae of infectious and parasitic diseases",
        "L00-L08": "Infections of the skin and subcutaneous tissue",  
        "L10-L14": "Bullous disorders",  
        "L20-L30": "Dermatitis and eczema",  
        "L40-L45": "Papulosquamous disorders",  
        "L50-L54": "Urticaria and erythema",  
        "L55-L59": "Radiation-related disorders of the skin and subcutaneous tissue",  
        "L60-L75": "Disorders of skin appendages",  
        "L80-L99": "Other disorders of the skin and subcutaneous tissue",
        "R20-R23": "Symptoms and signs involving the skin and subcutaneous tissue",
        "Z20-Z29": "Persons with potential health hazards related to communicable diseases",
        "U80-U89": "Bacterial agents resistant to antibiotics",
	    "A18.1":  "Tuberculosis of genitourinary system",
        "N00-N08": "Glomerular diseases",
        "N10-N16": "Renal tubulo-interstitial diseases",
        "N17-N19": "Renal failure",
        "N20-N23": "Urolithiasis",
        "N25-N29": "Other disorders of kidney and ureter",
        "N30-N39": "Other diseases of urinary system",
        "N80-N84": "Endometriosis and other diseases of female genital organs",
        "N85-N89": "Other disorders of the female genital organs",
        "N90-N99": "Other disorders of the genitourinary system",
        "Q60-Q64": "Congenital malformations of the urinary system",
        "R30-R39": "Symptoms and signs involving the urinary system"
    },
    "Ophthalmology": {
        "A18.5": "Tuberculosis of eye",
        "A21.1": "Oculoglandular tularemia",
        "A54": "Gonococcal Infection",
        "AA55-A56": "Chlamydial Infections",
        "A71": "Trachoma",
        "A74.0": "Chlamydial Conjunctivitis",
        "H00-H06": "Disorders of eyelid, lacrimal system and orbit",
        "H10-H13": "Disorders of conjunctiva",  
        "H15-H22": "Disorders of sclera, cornea, iris and ciliary body",  
        "H25-H28": "Disorders of lens",  
        "H30-H36": "Disorders of choroid and retina",  
        "H40-H42": "Glaucoma",  
        "H43-H45": "Disorders of vitreous body and globe",  
        "H46-H48": "Disorders of optic nerve and visual pathways",  
        "H49-H52": "Disorders of ocular muscles, binocular movement, accommodation and refraction",  
        "H53-H54": "Visual disturbances and blindness",  
        "H55-H59": "Other disorders of eye and adnexa", 
        "Q10-Q18": "Congenital malformations of eye, ear, face and neck"   
    },
    "Otolaryngology": {
        "C10": "Malignant neoplasm of oropharynx",
        "C11": "Malignant neoplasm of nasopharynx",
        "C12": "Malignant neoplasm of pyriform sinus",
        "C13": "Malignant neoplasm of hypopharynx",
        "C14": "Malignant neoplasm of ot…d sites in the lip, ora",
        "C30": "Malignant neoplasm of nasal cavity and middle ear",
        "C31": "Malignant neoplasm of accessory sinuses",
        "C32": "Malignant neoplasm of larynx",
        "H60-H62": "Diseases of external ear",  
        "H65-H75": "Diseases of middle ear and mastoid", 
        "H80-H83": "Diseases of inner ear",  
        "H90-H95": "Other disorders of ear",
        "Q10-Q18": "Congenital malformations of eye, ear, face and neck",
        "R47-R49": "Symptoms and signs involving speech and voice"
    },
    "Pulmonology": {
        "A16": "Respiratory tuberculosis, not confirmed bacteriologically or his",
        "A16.2": "Tuberculosis of lung, without mention of bacteriological or hist",
        "A16.3": "Tuberculosis of intrathoracic lymph nodes, without mention of",
        "A16.4": "Tuberculosis of larynx, trachea, and bronchus, without mentio",
        "A16.5": "Tuberculous pleurisy, without mention of bacteriological or his",
        "A16.7": "Primary respiratory tuberculosis, without mention of bacteriolo",
        "A16.8": "Other respiratory tuberculosis, without mention of bacteriologic",
        "A16.9": "Respiratory tuberculosis unspecified, without mention of bacte",
        "A19": "Miliary tuberculosis",
        "A19.0": "Acute miliary tuberculos…a single specified site",
        "A19.1": "Acute miliary tuberculosis of multiple sites",
        "A19.2": "Acute miliary tuberculosis, unspecified",
        "A19.8": "Other miliary tuberculosis",
        "A19.9": "Miliary tuberculosis, unspecified",
        "A20.2": "Pneumonic plague",
        "A21.2": "Pulmonary tularemia",
        "A22.1": "Pulmonary anthrax",
        "A75-A79": "Rickettsioses",
        "B90-B94": "Sequelae of infectious and parasitic diseases",
        "C33": "Malignant neoplasm of trachea",
        "C34": "Malignant neoplasm of bronchus and lung",
        "I26-I28": "Pulmonary heart disease and diseases of pulmonary circulation",
        "J00-J06": "Acute upper respiratory infections",  
        "J09-J18": "Influenza and pneumonia",  
        "J20-J22": "Other acute lower respiratory infections",  
        "J30-J39": "Other diseases of upper respiratory tract",  
        "J40-J47": "Chronic lower respiratory diseases",  
        "J60-J70": "Lung diseases due to external agents",  
        "J80-J84": "Other respiratory diseases principally affecting the interstitium", 
        "J85-J86": "Suppurative and necrotic conditions of lower respiratory tract",  
        "J90-J94": "Other diseases of pleura",  
        "J95-J99": "Other diseases of the respiratory system", 
        "Q30-Q34": "Congenital malformations of the respiratory system",
        "R00-R09": "Symptoms and signs involving the circulatory and respiratory systems"
    },
    "Cardiology": {
        "I00-I02": "Acute rheumatic fever",
        "I05-I09": "Chronic rheumatic heart diseases",
        "I10-I15": "Hypertensive diseases",  
        "I20-I25": "Ischaemic heart diseases", 
        "I26-I28": "Pulmonary heart disease and diseases of pulmonary circulation",  
        "I30-I52": "Other forms of heart disease",  
        "I70-I79": "Diseases of arteries, arterioles and capillaries",  
        "I80-I89": "Diseases of veins, lymphatic vessels and lymph nodes, not elsewhere classified",  
        "I95-I99": "Other and unspecified disorders of the circulatory system",  
        "R00-R09": "Symptoms and signs involving the circulatory and respiratory systems"  
    },
    "Neurology": {
        "Unspecified": "Focuses on the prevention, diagnosis, and treatment of adult diseases, managing a broad range of complex medical conditions involving various organ systems.",
        "A17": "Tuberculosis of nervous system",
        "A17.0":  "Tuberculous meningitis",
        "A17.1": "Meningeal tuberculoma",
        "A17.8": "Other tuberculosis of nervous system",
        "A17.9": "Tuberculosis of nervous system, unspecified",
        "A20.3": "Plague meningitis",
        "A33": "Tetanus neonatorum",
        "A34": "Obstetrical tetanus",
        "A35": "Other tetanus",
        "A39": "Meningococcal infection",
        "A50": "Congenital Syphilis",
        "A51": "Early Syphilis",
        "A52": "Late Syphilis",
        "A80-A89": "Viral infections of the central nervous system",
        "B90-B94": "Sequelae of infectious and parasitic diseases",  
        "D33": "Benign neoplasm of brain and other parts of central nervous system",
        "G00-G09": "Inflammatory diseases of the central nervous system",  
        "G10-G14": "Systemic atrophies primarily affecting the central nervous system",  
        "G20-G26": "Extrapyramidal and movement disorders",  
        "G30-G32": "Other degenerative diseases of the nervous system",  
        "G35-G37": "Demyelinating diseases of the central nervous system",  
        "G40-G47": "Episodic and paroxysmal disorders",  
        "G50-G59": "Nerve, nerve root and plexus disorders",  
        "G60-G64": "Polyneuropathies and other disorders of the peripheral nervous system",  
        "G70-G73": "Diseases of myoneural junction and muscle",  
        "G80-G83": "Cerebral palsy and other paralytic syndromes",  
        "G90-G99": "Other disorders of the nervous system",  
        "H60-H62": "Diseases of external ear",  
        "H65-H75": "Diseases of middle ear and mastoid", 
        "H80-H83": "Diseases of inner ear",  
        "H90-H95": "Other disorders of ear",
        "I60-I69": "Cerebrovascular diseases",
        "Q00-Q07": "Congenital malformations of the nervous system",
        "R25-R29": "Symptoms and signs involving the nervous and musculoskeletal systems",
        "R40-R46": "Symptoms and signs involving cognition, perception, emotional state and behaviour"
    },
    "Psychiatry": {
        "F20-F29": "Schizophrenia, schizotypal, delusional, and other non-mood psychotic disorders",
        "F30-F39": "Mood [affective] disorders",
        "F40-F48": "Anxiety, dissociative, stress-related, somatoform, and other nonpsychotic mental disorders",
        "F50-F59": "Behavioral syndromes associated with physiological disturbances and physical factors",
        "F60-F69": "Disorders of adult personality and behavior",
        "F90-F98": "Behavioral and emotional disorders with onset usually occurring in childhood and adolescence"
    },
    "Rehabilitation/Physical Therapy": {
        "C00-C97": "Malignant neoplasms",
        "D00-D09": "In situ neoplasms",
        "E00-E89": "Endocrine, nutritional, and metabolic diseases",
        "I00-I99": "Diseases of the circulatory system",
        "M00-M99": "Diseases of the musculoskeletal system and connective tissue",
        "R90-R94": "Abnormal findings on diagnostic imaging and in function studies, without diagnosis"
    },
    "Orthopedics": {
        "A18.0": "Tuberculosis of bones and joints",
        "C76.4": "Upper limb",
        "C76.5": "Lower limb",
        "C77.3": "Axillary and upper limb lymph nodes",
        "C77.4": "Inguinal and lower limb lymph nodes",
        "C79.5": "Secondary malignant neoplasm of bone and bone marrow",
        "M00-M25": "Arthropathies",  
        "M30-M36": "Systemic connective tissue disorders",  
        "M40-M54": "Dorsopathies",  
        "M60-M79": "Soft tissue disorders",  
        "M80-M94": "Osteopathies and chondropathies",
        "M95-M99": "Other disorders of the musculoskeletal system and connective tissue",  
        "Q65-Q79": "Congenital malformations and deformations of the musculoskeletal system",
        "R10-R19": "Symptoms and signs involving the digestive system and abdomen",
        "R25-R29": "Symptoms and signs involving the nervous and musculoskeletal systems",
        "S40-S49": "Injuries to the shoulder and upper arm",
        "S50-S59": "Injuries to the elbow and forearm",
        "S60-S69": "Injuries to the wrist and hand",
        "S70-S79": "Injuries to the hip and thigh", 
        "S80-S89": "Injuries to the knee and lower leg", 
        "S90-S99": "Injuries to the ankle and foot",
        "S20-S29": "Injuries to the thorax",
        "S30-S39": "Injuries to the abdomen, lower back, lumbar spine, and pelvis",
        "T08-T14": "Injuries to unspecified parts of trunk, limb, or body region",
        "T79": "Certain early complications of trauma",
        "T90-T98": "Sequelae of injuries",
        "V01-X59": "Accidents", 
        "Y40-Y84": "Complications of medical and surgical care",
        "Z40-Z54": "Persons encountering health services for specific procedures and health care"
    },
    "Anesthesiology": {
        "Unspecified": "Often deals with a broad range of conditions common in surgical specialist",
        "T80-T88": "Complications of surgical and medical care, not elsewhere classified",
        "R57": "Shock, not elsewhere classified",
        "R65": "Systemic inflammatory response syndrome (SIRS) of non-infectious origin",
        "J95": "Postprocedural respiratory disorders, not elsewhere classified",
        "G93.9": "Disorder of brain, unspecified",
        "I46": "Cardiac arrest"
    },
    "Nephrology": {
        "Unspecified": "Focuses on the prevention, diagnosis, and treatment of adult diseases, managing a broad range of complex medical conditions involving various organ systems.",
        "A01": "Typhoid and paratyphoid fevers",
        "B00-B09": "Viral infections characterized by skin and mucous membrane lesions",  
        "B15-B19": "Viral hepatitis",
        "B20-B24": "Human immunodeficiency virus [HIV] disease",
        "B25-B34": "Other viral diseases",
        "B35-B49": "Mycoses",
        "B50-B64": "Protozoal diseases",
        "B65-B83": "Helminthiases", 
        "C00-D49": "Neoplasms",
        "C81-C96": "Malignant neoplasms, stated or presumed to be primary, of lymphoid, haematopoietic and related tissue",
        "C97-C97": "Malignant neoplasms of independent (primary) multiple sites",
        "D50-D89": "Diseases of the blood and blood-forming organs and certain disorders involving the immune mechanism",
        "G00-G03": "Infections of the nervous system",
        "G10-G14": "Hereditary and degenerative diseases of the central nervous system",
        "G20-G26": "Extrapyramidal and movement disorders",
        "I00-I09": "Rheumatic fever",
        "I10-I15": "Hypertension",
        "I20-I25": "Ischemic heart diseases",
        "I26-I28": "Pulmonary heart disease and diseases of pulmonary circulation",
        "M00-M25": "Arthropathies",
        "M30-M36": "Systemic connective tissue disorders",
        "N00-N08": "Glomerular diseases",
        "N10-N16": "Renal failure",
        "N17-N19": "Acute and chronic renal failure",
        "R70-R79": "Abnormal findings on examination of blood, without diagnosis",
        "R80-R82": "Abnormal findings on examination of urine, without diagnosis",  
        "R83-R89": "Abnormal findings on examination of other body fluids, substances and tissues, without diagnosis",  
        "R90-R94": "Abnormal findings on diagnostic imaging and in function studies, without diagnosis",
        "Z00-Z13": "Persons encountering health services for examination and investigation",
        "Z40-Z54": "Persons encountering health services for specific procedures and health care"
    },
    "Rheumatology": {
        "A00": "Cholera",
        "A18.4": "Tuberculosis of skin and subcutaneous tissue",
        "A20.1": "Cellulocutaneous plague",
        "A21.0": "Ulceroglandular tularemia",
        "A22.0": "Cutaneous anthrax",
        "A26": "Erysipeloid",
        "A30": "Leprosy (Hansen's disease)",
        "A46": "Erysipelas",
        "A50-A64": "Infections with a predominantly sexual mode of transmission",
        "A65-A69": "Other spirochaetal diseases",
        "A74.8": "Other Chlamydial Diseases",
        "A74.9": "Chlamydial Infection, Unspecified",
        "A90-A99": "Arthropod-borne viral fevers and viral haemorrhagic fevers",
        "B00-B09": "Viral infections characterized by skin and mucous membrane lesions",
        "B25-B34": "Other viral diseases",
        "B35-B49": "Mycoses",
        "B85-B89": "Pediculosis, acariasis and other infestations",
        "B90-B94": "Sequelae of infectious and parasitic diseases",
        "L00-L08": "Infections of the skin and subcutaneous tissue",  
        "L10-L14": "Bullous disorders",  
        "L20-L30": "Dermatitis and eczema",  
        "L40-L45": "Papulosquamous disorders",  
        "L50-L54": "Urticaria and erythema",  
        "L55-L59": "Radiation-related disorders of the skin and subcutaneous tissue",  
        "L60-L75": "Disorders of skin appendages",  
        "L80-L99": "Other disorders of the skin and subcutaneous tissue",
        "R20-R23": "Symptoms and signs involving the skin and subcutaneous tissue",
        "Z20-Z29": "Persons with potential health hazards related to communicable diseases",
        "U80-U89": "Bacterial agents resistant to antibiotics"
    },
    "Dentistry": {
        "K01": "Impacted teeth",
        "K02": "Dental caries",
        "K03": "Other diseases of hard tissues of teeth",
        "K04": "Diseases of pulp and periapical tissues",
        "K05": "Gingivitis and periodontal disease",
        "K06": "Other disorders of gingiva and edentulous alveolar ridge",
        "K07": "Disorders of jaw",
        "K08": "Other disorders of teeth and supporting structures",
        "K09": "Cysts of oral region, not elsewhere classified",
        "K10": "Other disorders of jaw",
        "K11": "Disorders of salivary glands",
        "K12": "Stomatitis and related lesions",
        "K13": "Diseases of oral mucosa",
        "A05.9": "Bacterial food poisoning, unspecified",
        "R05": "Cough",
        "F70-F79": "Intellectual disabilities",       	
	    "K00-K14": "Diseases of the oral cavity, salivary glands, and jaws",
        "K05.0-K05.9": "Gingivitis and periodontal diseases",
        "K03.0-K03.9": "Other diseases of hard tissues of the teeth",
        "K04.0-K04.9": "Diseases of the pulp and periapical tissues",
        "K06.0-K06.9": "Other diseases of gingiva and edentulous alveolar ridge",
	    "K05": "Gingivitis and periodontal diseases",
        "K07.6": "Other specified disorders of teeth and supporting structures",
        "K04": "Diseases of pulp and periapical tissues"
    }
}

def get_icd_codes(specialties):
    icd10_codes = []
    if pd.notnull(specialties):  
        for specialty in specialties.split(', '):  
            if specialty in specialty_to_ICD10_mapping:
                icd10_codes.extend(specialty_to_ICD10_mapping[specialty].keys())
    return list(set(icd10_codes)) if icd10_codes else "" 

cleaned_anamnesa['icd10'] = cleaned_anamnesa['clinics_specialty'].apply(get_icd_codes)

columns_to_clean = [
    'main_complaint', 'other_complaint', 'current_disease_history', 'family_history',
    'rwyt_penyakit_keluarga', 'previous_disease_history', 'medical_history'
]

empty_values = ['-', 'TIDAK', 'TIDAK ADA', None, '', 'nan', np.nan]

def clean_column(value):
    if isinstance(value, str):
        value = value.strip().upper()  
    return '' if value in empty_values or pd.isna(value) else value

for col in columns_to_clean:
    if col in cleaned_anamnesa.columns:
        cleaned_anamnesa[col] = cleaned_anamnesa[col].apply(clean_column)

cleaned_anamnesa[columns_to_clean] = cleaned_anamnesa[columns_to_clean].fillna('')

print(cleaned_anamnesa)

combined_df['admission_id'] = combined_df['admission_id'].astype(str)
combined_df['person_id'] = combined_df['person_id'].astype(str)
cleaned_anamnesa['admission_id'] = cleaned_anamnesa['admission_id'].astype(str)
cleaned_anamnesa['person_id'] = cleaned_anamnesa['person_id'].astype(str)

add_ana_dia = combined_df.merge(cleaned_anamnesa, on=['admission_id', 'person_id'], how='inner')

# Combine poli_name & poli_id
different_poli_mask = (add_ana_dia['poli_name_x'].notnull()) & (add_ana_dia['poli_name_y'].notnull()) & (add_ana_dia['poli_name_x'] != add_ana_dia['poli_name_y'])
different_poli_count = different_poli_mask.sum()

if different_poli_count > 0:
    message = "Some rows have different poli names"
else:
    message = "All poli names are the same or one of them is missing"

print(message)
print(f"Count of rows with different poli names: {different_poli_count}")

different_poli_mask = (add_ana_dia['poli_name_x'].notnull()) & (add_ana_dia['poli_name_y'].notnull()) & (add_ana_dia['poli_name_x'] != add_ana_dia['poli_name_y'])
different_poli_count = different_poli_mask.sum()
add_ana_dia_cleaned = add_ana_dia[~different_poli_mask]
print(f"Rows remaining after deletion: {len(add_ana_dia_cleaned)}")

different_poli_mask = (add_ana_dia['poli_id_x'].notnull()) & (add_ana_dia['poli_id_y'].notnull()) & (add_ana_dia['poli_id_x'] != add_ana_dia['poli_id_y'])
different_poli_count = different_poli_mask.sum()

if different_poli_count > 0:
    message = "Some rows have different poli ids"
else:
    message = "All poli ids are the same or one of them is missing"

print(message)
print(f"Count of rows with different poli ids: {different_poli_count}")

different_poli_mask = (add_ana_dia['poli_id_x'].notnull()) & (add_ana_dia['poli_id_y'].notnull()) & (add_ana_dia['poli_id_x'] != add_ana_dia['poli_id_y'])
different_poli_count = different_poli_mask.sum()
add_ana_dia_cleaned = add_ana_dia[~different_poli_mask]
print(f"Rows remaining after deletion: {len(add_ana_dia_cleaned)}")

# Combine 'poli_name_x' & 'poli_name_y'
add_ana_dia_cleaned['poli_name'] = add_ana_dia_cleaned.apply(
    lambda row: row['poli_name_x'] if pd.notnull(row['poli_name_x']) else row['poli_name_y'],
    axis=1
)

add_ana_dia_combined = add_ana_dia_cleaned.drop(columns=['poli_name_x', 'poli_name_y'])

# Combine 'poli_id_x' & 'poli_name_y'
add_ana_dia_combined['poli_id'] = add_ana_dia_combined.apply(
    lambda row: row['poli_id_x'] if pd.notnull(row['poli_id_x']) else row['poli_id_y'],
    axis=1
)

add_ana_dia_combined = add_ana_dia_combined.drop(columns=['poli_id_x', 'poli_id_y'])

# Combining the other 5 files 
# Columns to check for 'fisik_value'
columns_to_check = [
    ('kepala', 'kepala_detail'),
    ('mata', 'mata_detail'),
    ('telinga', 'telinga_detail'),
    ('hidung', 'hidung_detail'),
    ('tenggorokan', 'tenggorokan_detail'),
    ('mulut', 'mulut_detail'),
    ('leher', 'leher_detail'),
    ('dada', 'dada_detail'),
    ('jantung', 'jantung_detail'),
    ('paru_paru', 'paru_paru_detail'),
    ('genetelia_reproduksi', 'genetelia_reproduksi_detail'),
    ('abdomen', 'abdomen_detail'),
    ('kulit', 'kulit_detail'),
    ('anus', 'anus_detail'),
    ('urogenital', 'urogenital_detail'),
    ('ekstremitas', 'ekstremitas_detail'),
    ('muskuloskeletal', 'muskuloskeletal_detail'),
    ('status_badan', 'status_badan_detail')
]

def create_fisik_value(row):
    fisik_dict = {}
    for organ, detail in columns_to_check:
        organ_value = row[organ]
        if organ_value == 99.0:
            fisik_dict[organ] = row[detail]
    return fisik_dict

def clean_fisik_value(fisik_dict):
    cleaned_dict = {}
    for key, value in fisik_dict.items():
        if value in ['', '{"99_0":""}']: 
            cleaned_dict[key] = None  
        elif isinstance(value, str) and value.startswith('{"99_0":'): 
            try:
                parsed_value = json.loads(value)
                extracted_value = parsed_value.get("99_0", "")
                if extracted_value:  
                    cleaned_dict[key] = extracted_value
                else: 
                    cleaned_dict[key] = None
            except json.JSONDecodeError:
                cleaned_dict[key] = value  
        else:
            cleaned_dict[key] = value 

    final_dict = {k: v for k, v in cleaned_dict.items() if v is not None}

    for k, v in cleaned_dict.items():
        if v is None: 
            final_dict[k] = None

    compact_dict = {k.lower(): (v.upper() if isinstance(v, str) else v) for k, v in final_dict.items()}
    return compact_dict

fisik['fisik_value'] = fisik.apply(create_fisik_value, axis=1)
fisik = fisik[['admission_id', 'person_id', 'fisik_value']].drop_duplicates(subset=['admission_id', 'person_id'], keep='first')
fisik['fisik_value'] = fisik['fisik_value'].apply(lambda x: clean_fisik_value(x) if x != {} else "")
print(fisik)

add_ana_dia_combined['admission_id'] = add_ana_dia_combined['admission_id'].astype(str)
add_ana_dia_combined['person_id'] = add_ana_dia_combined['person_id'].astype(str)
fisik['admission_id'] = fisik['admission_id'].astype(str)
fisik['person_id'] = fisik['person_id'].astype(str)

combined_4 = add_ana_dia_combined.merge(fisik, on=['admission_id', 'person_id'], how='left')
combined_4

#fisik_gigi
columns_to_keep_gigi = [
    'admission_id', 'person_id', 'odontogram', 'occulasi_id', 'tonus_palatinus_id',
    'tonus_mandibularis_id', 'palatum_id', 'have_supernumerary_teeth', 
    'supernumerary_teeth', 'have_diasterna', 'diasterna', 'have_gigi_anomali', 
    'gigi_anomali', 'ket_cabut_gigi', 'lain_lain', 'calculus_positions', 
    'stain_positions', 'caries_dentis', 'caries_dentis_lainnya', 
    'gigi', 'gigi_lainnya', 'edentulous_area', 'edentulous_area_lainnya', 
    'pemeriksaan_lainnya'
]

fisik_gigi = fisik_gigi.filter(items=columns_to_keep_gigi)
gigi_columns = columns_to_keep_gigi[2:]

def clean_data(d):
    if isinstance(d, dict):
        return {k.lower(): (clean_data(v).upper() if isinstance(v, str) else clean_data(v)) 
                for k, v in d.items() if v != {} and v != [] and v is not None}
    elif isinstance(d, list):
        return [clean_data(v) for v in d if v != {} and v != [] and v is not None]
    return d

def parse_and_clean(json_str):
    try:
        data = json.loads(json_str)
        return clean_data(data)
    except (TypeError, json.JSONDecodeError):
        return {}

def apply_cleaning(row):
    cleaned_row = {}
    for col in gigi_columns:
        cleaned_row[col] = parse_and_clean(row[col])
    return cleaned_row

fisik_gigi['fisik_gigi_value'] = fisik_gigi[gigi_columns].apply(apply_cleaning, axis=1)

def remove_empty_dict_keys(row):
    return {k: v for k, v in row.items() if v != {}}

fisik_gigi['fisik_gigi_value'] = fisik_gigi['fisik_gigi_value'].apply(remove_empty_dict_keys)
fisik_gigi = fisik_gigi[['admission_id', 'person_id', 'fisik_gigi_value']]
fisik_gigi = fisik_gigi.drop_duplicates(subset=['admission_id', 'person_id'], keep='first')
fisik_gigi['fisik_gigi_value'] = fisik_gigi['fisik_gigi_value'].apply(lambda x: "" if x == {} else x)
print(fisik_gigi)

combined_4['admission_id'] = combined_4['admission_id'].astype(str)
combined_4['person_id'] = combined_4['person_id'].astype(str)
fisik_gigi['admission_id'] = fisik_gigi['admission_id'].astype(str)
fisik_gigi['person_id'] = fisik_gigi['person_id'].astype(str)

combined_5 = combined_4.merge(fisik_gigi, on=['admission_id', 'person_id'], how='left')
combined_5

#fisik_mata
columns_to_keep_mata = [
    'admission_id', 'person_id', 'oftalmologis', 'posterior', 'anterior', 
    'od_detail', 'os_detail', 'visus_sc_od', 'visus_cc_od', 'posisi_od', 
    'pergerakan_od', 'pupil_distance_od', 'palpebra_od', 'conj_tarsalis_od', 
    'fornix_od', 'bulbi_od', 'kornea_od', 'kamera_okuli_anterior_od', 
    'iris_od', 'pupil_od', 'lensa_od', 'c_vitreous_od', 
    'tekanan_bola_mata_od', 'funduscopy_od', 'visus_sc_os', 
    'visus_cc_os', 'posisi_os', 'pergerakan_os', 'pupil_distance_os', 
    'palpebra_os', 'conj_tarsalis_os', 'fornix_os', 'bulbi_os', 
    'kornea_os', 'kamera_okuli_anterior_os', 'iris_os', 
    'pupil_os', 'lensa_os', 'c_vitreous_os', 'tekanan_bola_mata_os', 
    'funduscopy_os', 'spheris_od', 'spheris_os', 
    'cylindris_od', 'cylindris_os', 'axis_od', 'axis_os', 
    'add_od', 'add_os'
]

fisik_mata = fisik_mata.filter(items=columns_to_keep_mata)
mata_columns = columns_to_keep_mata[2:]

fisik_mata['fisik_mata_value'] = fisik_mata[mata_columns].apply(lambda row: row.to_dict(), axis=1)

def clean_and_transform_values(d):
    if isinstance(d, dict):
        return {k.lower(): (v.upper() if isinstance(v, str) else v) 
                for k, v in d.items() if pd.notna(v) and v != ''}
    return d

fisik_mata['fisik_mata_value'] = fisik_mata['fisik_mata_value'].apply(clean_and_transform_values)

fisik_mata = fisik_mata[fisik_mata['fisik_mata_value'].apply(lambda x: bool(x) if isinstance(x, dict) else False)]
fisik_mata = fisik_mata[['admission_id', 'person_id', 'fisik_mata_value']]
fisik_mata = fisik_mata.drop_duplicates(subset=['admission_id', 'person_id'], keep='first')

print(fisik_mata)

combined_5['admission_id'] = combined_5['admission_id'].astype(str)
combined_5['person_id'] = combined_5['person_id'].astype(str)
fisik_mata['admission_id'] = fisik_mata['admission_id'].astype(str)
fisik_mata['person_id'] = fisik_mata['person_id'].astype(str)

combined_6 = combined_5.merge(fisik_mata, on=['admission_id', 'person_id'], how='left')
combined_6

# tanda_vital
columns_to_keep = [
    'admission_id', 'person_id', 'sistole', 'diastole', 'nadi', 'pernafasan', 'suhu', 
    'crt', 'spo2', 'avpu', 'gula_darah', 'supplemental_oxygen', 'tube_no', 
    'tube_transfusion_start', 'action_desc', 'discharge_lochia', 'proteinuria'
]

tanda_vital = tanda_vital.filter(items=columns_to_keep)

vital_signs_columns = [
    'sistole', 'diastole', 'nadi', 'pernafasan', 'suhu', 'crt', 'spo2', 
    'avpu', 'gula_darah', 'supplemental_oxygen', 'tube_no', 'tube_transfusion_start',
    'action_desc', 'discharge_lochia', 'proteinuria'
]

def clean_and_transform_values(d):
    if isinstance(d, dict):
        return {k.lower(): (v.upper() if isinstance(v, str) else v) 
                for k, v in d.items() if pd.notna(v) and v != ''}
    return d

tanda_vital['tanda_vital_value'] = tanda_vital[vital_signs_columns].apply(
    lambda row: clean_and_transform_values(row.to_dict()), axis=1
)

tanda_vital = tanda_vital[['admission_id', 'person_id', 'tanda_vital_value']]
tanda_vital = tanda_vital.drop_duplicates(subset=['admission_id', 'person_id'], keep='first')
print(tanda_vital)
