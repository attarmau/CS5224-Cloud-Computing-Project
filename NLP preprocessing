import pandas as pd
import numpy as np
import json
import re
from datetime import datetime

admission = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/admission.csv')
diagnosa = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/diagnosa.csv')
anamnesa = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_anamnesa.csv')
fisik = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_fisik.csv')
fisik_gigi = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_fisik_gigi.csv')
fisik_mata = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_fisik_mata.csv')
tanda_vital = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/ases_tanda_vital.csv')
allergy = pd.read_csv('/Users/judyhuang/Desktop/rsmpm/m_person_allergy.csv')

specialization_mapping = {
    'DR PRAPTI EKA WAHYUNING': 'NaN',
    'DR TORIQ ARI PRAMBODO': 'NaN',
    'DR RUDY GUNAWAN': 'NaN',
    'DR ZAINUL FIKRI': 'NaN',
    'DR RUDIYANTO SP.PD': 'NaN',
    'DR YOEFAN FAISHAL ISLAM': 'NaN',
    'DR MAHARANI TONTOWI': 'NaN',
    'DR ABDUL HARIS SP.A': 'NaN',
    'DR DIAN SARASWATI': 'Spesialis Anak',
    'DR ALPHANI KURNIASARI SP.PD': 'NaN',
    'DR SAMSURI SP.P': 'NaN',
    'DR MOH NURKHOLIS ROUFI SP.BS': 'NaN',
    'DR SURYO PRASETYO TRIBOWO': 'NaN',
    'DR ABDUL MUDJIB': 'Spesialis Anak',
    'DR WINDA AMELIA LESTARI': 'NaN',
    'TIM SAKINAH': 'NaN',
    'DR RUDYANTO': 'Spesialis Penyakit Dalam',
    'DR DHANI TRI WAHYU SP.JP': 'NaN',
    'DR DHANI TRI WAHYU': 'Spesialis Jantung dan Pembuluh Darah',
    'DR RATNA DEWI SILALAHI': 'Spesialis Jantung dan Pembuluh Darah',
    'RUDIYANTO': 'NaN',
    'DR MOHAMAD ARY FIRMANTO': 'Spesialis Penyakit Dalam',
    'DR RATNA ADELIA PRAVITASARI': 'Spesialis Penyakit Dalam',
    'DR WIDHY PRAMONO': 'Spesialis Bedah',
    'DR ZICO PARADIGMA': 'Spesialis Bedah',
    'DR ZAINUL MUHTAROM': 'Spesialis Bedah',
    'DR IDA KUSUMANINGRUM': 'Spesialis Obstetri & Ginekologi (Kebidanan dan Kandungan)',
    'DR YULIANTO BASUKI': 'Spesialis Obstetri & Ginekologi (Kebidanan dan Kandungan)',
    'DR FAIZAL RACHMAN': 'NaN',
    'DR SOEPRIJANTOTRISNO PRIBADI': 'Spesialis Bedah Orthopaedi dan Traumatologi',
    'DR BUDI SAMSUL FUAD': 'Spesialis Mata'
}

def clean_name(name):
    if isinstance(name, str):
        name = name.upper()
        name = re.sub(r'SP\.\w+', '', name)
        return name.strip()
    return ''

admission['encounter_with_name_cleaned'] = admission['encounter_with_name'].apply(clean_name)
specialization_mapping_cleaned = {clean_name(key): value for key, value in specialization_mapping.items()}
admission['doctor_sp'] = admission['encounter_with_name_cleaned'].map(specialization_mapping_cleaned)
admission['doctor_sp'] = admission['doctor_sp'].replace('NaN', '')
admission['sex'] = admission['sex'].replace({'L': 'female', 'P': 'male'})
cleaned_admission = admission[~admission['sex'].isin(['', 'U'])]
cleaned_admission['diagnosa_rm'] = cleaned_admission['diagnosa_rm'].astype(str).str.upper()

cleaned_admission['tgl_lahir'] = pd.to_datetime(cleaned_admission['tgl_lahir'], errors='coerce')
cleaned_admission = cleaned_admission.dropna(subset=['tgl_lahir'])
current_date = datetime.now()
cleaned_admission['age'] = cleaned_admission['tgl_lahir'].apply(
    lambda dob: current_date.year - dob.year - ((current_date.month, current_date.day) < (dob.month, dob.day))
)
cleaned_admission = cleaned_admission[cleaned_admission['age'] > 0]

cleaned_admission = cleaned_admission.fillna('')
columns_to_keep = [
    'admission_id', 'person_id', 'sex', 'age', 'diagnosa_awal', 'diagnosa_awal_desc',
    'diagnosa_rm', 'diagnosa_primer', 'diagnosa_primer_desc', 'poli_id',
    'encounter_with_id', 'encounter_with_name', 'encounter_change_id',
    'encounter_change_name', 'jns_pelayanan_id', 'jns_pelayanan_name', 'poli_name', 'doctor_sp'
]

cleaned_admission = cleaned_admission[columns_to_keep]
cleaned_admission

# Check if 'diagnosa_rm' is empty (all values are NaN)
is_diagnosa_rm_empty = cleaned_admission['diagnosa_rm'].isna().all()

if is_diagnosa_rm_empty:
    print("'diagnosa_rm' is an empty column.")
else:
    print("'diagnosa_rm' has values.")

# diagnosa
diagnosa = diagnosa.dropna(subset=['person_id', 'rm_id','diagnosa'])[diagnosa['is_active'] == 1]
columns_to_keep_diagnosa = [
    'admission_id', 'person_id', 'episode_id', 'diagnosa', 'diagnosa_desc', 'diagnosa_type'
]

existing_columns_diagnosa = [col for col in columns_to_keep_diagnosa if col in diagnosa.columns]
filtered_diagnosa = diagnosa[existing_columns_diagnosa]
cleaned_diagnosa = filtered_diagnosa.dropna(subset=['admission_id', 'person_id', 'diagnosa', 'diagnosa_desc', 'diagnosa_type'])
cleaned_diagnosa = cleaned_diagnosa.fillna('')
cleaned_diagnosa = cleaned_diagnosa[~cleaned_diagnosa['diagnosa_type'].isin(['rehab medik', 'pasca bedah'])]

cleaned_diagnosa

cleaned_diagnosa['admission_id'] = cleaned_diagnosa['admission_id'].astype(str)
cleaned_admission['admission_id'] = cleaned_admission['admission_id'].astype(str)

combined_df = cleaned_diagnosa.merge(cleaned_admission, on=['admission_id', 'person_id'], how='inner')

# anamnesa

anamnesa = anamnesa.dropna(subset=['person_id', 'rm_id','keluhan_utama'])[anamnesa['is_active'] == 1]

columns_to_keep_anamnesa = [
    'admission_id', 'person_id', 'poli_id', 'keluhan_utama', 'keluhan_lainnya',
    'rwyt_penyakit_skrg', 'status_rwyt_penyakit_keluarga',
    'rwyt_penyakit_keluarga', 'rwyt_penyakit_dulu', 'rwyt_pengobatan', 'poli_name'
]

existing_columns_anamnesa = [col for col in columns_to_keep_anamnesa if col in anamnesa.columns]
filtered_anamnesa = anamnesa[existing_columns_anamnesa]
filtered_anamnesa = filtered_anamnesa.dropna(subset=['admission_id', 'person_id'])
cleaned_anamnesa = filtered_anamnesa.rename(columns={
    'diagnosa': 'diagnosa_anamnesa',
    'keluhan_utama': 'main_complaint',
    'keluhan_lainnya': 'other_complaint',
    'rwyt_penyakit_skrg': 'current_disease_history',
    'rwyt_penyakit_dulu': 'previous_disease_history',
    'status_rwyt_penyakit_keluarga': 'family_history',
    'rwyt_pengobatan': 'medical_history'
})

family_history_dict = {
    "1": "Hipertensi",
    "2": "Penyakit Jantung",
    "3": "Stroke",
    "4": "TB Paru",
    "5": "Diabetes Melitus",
    "6": "Asma",
    "7": "Lain-lain",
    "8": "Tidak Ada"
}

def process_family_history(text):
    if not isinstance(text, str) or not text:
        return ""
    lis = text.split(",")
    temp = ['Tidak Ada' for _ in lis]
    for i in range(len(lis)):
        if lis[i] in family_history_dict:
            temp[i] = family_history_dict[lis[i]]
    return ', '.join(temp)

cleaned_anamnesa['family_history'] = cleaned_anamnesa['family_history'].apply(process_family_history)

def transform_and_uppercase(text):
    if not isinstance(text, str):
        return text
    text = text.upper()
    if 'HT' in text:
        text = text.replace('HT', 'HIPERTENSI')
    if 'DM' in text or 'DIABETES' in text:
        text = text.replace('DM', 'DIABETES MELITUS').replace('DIABETES', 'DIABETES MELITUS')
    if 'TEST' in text:
        text = text.replace('TEST', '')
    return text.strip()

columns_to_transform = [
    'main_complaint', 'other_complaint', 'current_disease_history', 
    'family_history', 'previous_disease_history', 'medical_history'
]

for col in columns_to_transform:
    if col in cleaned_anamnesa.columns:
        cleaned_anamnesa[col] = cleaned_anamnesa[col].apply(transform_and_uppercase)

cleaned_anamnesa = cleaned_anamnesa.drop_duplicates(subset=['admission_id', 'person_id'], keep='first')

# mapping 
clinics_to_specialty_mapping = {

    "3175326": {
        "9103": ["Obstetrics and Gynecology"],
        "9104": ["Pediatrics"],
        "9105": ["Internal Medicine", "Surgery", "Pathology"],
        "9106": ["Dermatology", "Urology"],
        "9107": ["Ophthalmology"],
        "9109": ["Otolaryngology", "Internal Medicine"],
        "9110": ["Internal Medicine"],
        "9111": ["Pathology", "Pulmonology"],
        "9112": ["Cardiology"],
        "9113": ["Neurology", "Internal Medicine"],
        "9114": ["Psychiatry"],
        "9123": ["Rehabilitation/Physical Therapy"],
        "9126": ["Urology"],
        "9130": ["Urology"],
        "9131": ["Orthopedics"],
        "9151": ["Neurology"],
        "9152": ["Obstetrics and Gynecology"],
        "9153": ["Pediatrics"],
        "9154": ["Internal Medicine"],
        "9155": ["Cardiology"],
        "9156": ["Pathology"],
        "9157": ["Rehabilitation/Physical Therapy"],
        "9158": ["Dermatology"],
        "9161": ["Surgery"],
        "9162": [],
        "9166": ["Psychiatry"],
        "9167": [],
        "9168": ["Ophthalmology"],
        "9169": ["Otolaryngology"],
        "9170": ["Dentistry"],
        "9171": ["Urology"],
        "9172": ["Orthopedics"],
        "IGD": [],
        "ICU": []
    },
    "3210014": {
        "IGD": [],
        "HDL": ["Internal Medicine", "Nephrology"],
        "BED": ["Surgery", "Internal Medicine"],
        "JIW": ["Psychiatry"],
        "MAT": ["Ophthalmology"],
        "SAR": ["Neurology"],
        "ANA": ["Pediatrics"],
        "OBG": ["Obstetrics and Gynecology", "Internal Medicine"],
        "BDM": ["Internal Medicine"],
        "ICU": [],
        "AKA": ["Internal Medicine"],
        "INT": ["Orthopedics", "Internal Medicine"],
        "TBD": ["Internal Medicine"],
        "THT": ["Otolaryngology"],
        "TLD": ["Internal Medicine"],
        "ORT": ["Orthopedics"],
        "TLA": ["Pediatrics"],
        "KLT": ["Surgery", "Ophthalmology", "Pediatrics"],
        "NICU": ["Pediatrics"],
        "GIG": ["Dentistry"]
    },
    "3308022": {
        "IGD": [],
        "JAN": ["Rheumatology", "Cardiology"],
        "URO": ["Urology"],
        "ANA": ["Pediatrics"],
        "PED": ["Internal Medicine"],
        "PAR": ["Pathology", "Pulmonology"],
        "JIW": ["Psychiatry"],
        "OBG": ["Obstetrics and Gynecology"],
        "ORT": ["Orthopedics"],
        "UMU": [],
        "BED": ["Surgery", "Anesthesiology"],
        "DEV": ["Dermatology"],
        "KGI": ["Dentistry"],
        "nan": [],
        "THT": ["Otolaryngology"],
        "ICU": [],
        "SYA": ["Neurology"],
        "TBD": ["Pathology"],
        "FLA": ["Rheumatology", "Internal Medicine"],
        "NICU": ["Pediatrics"],
        "GIG": ["Dentistry"],
        "RHB": ["Rehabilitation/Physical Therapy"]
    },
    "3516062": {
        "JAN": ["Rheumatology"],
        "IGD": [],
        "BED": ["Surgery"],
        "ANA": ["Pediatrics"],
        "OBG": ["Obstetrics and Gynecology"],
        "MAT": ["Ophthalmology"],
        "THT": ["Otolaryngology"],
        "INT": ["Internal Medicine"],
        "nan": [],
        "BSY": ["Surgery"],
        "PAR": ["Pathology", "Pulmonology"],
        "SAR": ["Neurology"],
        "ORT": ["Orthopedics"],
        "URO": ["Urology"],
        "GP1": ["Dentistry"],
        "KLT": ["Dermatology"],
        "JIW": ["Psychiatry"],
        "IRM": ["Rehabilitation/Physical Therapy"],
        "ICU": [],
        "UMU": [],
        "HDL": ["Internal Medicine", "Nephrology"],
        "GND": ["Dentistry"],
        "GIZ": [],
        "ODC": ["Ophthalmology"]
    }
}

flat_mapping = {key: ', '.join(values) for region in clinics_to_specialty_mapping.values() for key, values in region.items()}
cleaned_anamnesa['clinics_specialty'] = cleaned_anamnesa['poli_id'].map(flat_mapping)
